generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  variants   Variant[]   @relation("StoreToVariant")
  colours    Colour[]    @relation("StoreToColour")
  products   Product[]   @relation("StoreToProduct")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Variant {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToVariant", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] @relation("VariantToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Colour {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColour", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] @relation("ColourToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  variantId  String
  variant    Variant  @relation("VariantToProduct", fields: [variantId], references: [id])
  colourId   String
  colour     Colour   @relation("ColourToProduct", fields: [colourId], references: [id])
  name       String
  price      Decimal
  quantity   Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  images     Image[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
